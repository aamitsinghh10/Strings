class Solution {
public:
    bool isPalindrome(string s)
    {
        int l=0;
        int r=s.size()-1;
        
        while(l<r)
        {
            if(s[l]!=s[r])
                return false;
            l++;
            r--;
                
        }
        return true;
    }
    void solve(string s,vector<vector<string>> &ans,vector<string>&v)
    {
        if(s.size()==0)//when the string size is empty
        {
            ans.push_back(v);
            return;
        }
        for(int i=0;i<s.size();i++)
        {
            string prefix=s.substr(0,i+1);//start from 0 and go before i+1
            string leftover_string=s.substr(i+1);//left over string from i+1 to n
            
            if(isPalindrome(prefix)==true)//when prefix string is palindrome
            {
                v.push_back(prefix);//insert it on vector string v
                solve(leftover_string,ans,v);
                v.pop_back();//make the vector v empty
            }
        }
    }
    vector<vector<string>> partition(string s) 
    {
        vector<vector<string>> ans;
        vector<string> v;
        
        solve(s,ans,v);
        return ans;
    }
};
